
@tenderlove: yes 4-0-0 seems to have the same problem. 

As for the rest: 

This is interesting and at least to me not clear at all. In particular with
respect to the mentioned "auto serialization". Where is the corresponding code
located in the rails source? At any rate: 

On rc2 and on the current "4-0-0" branch it fails for me on `create!` if I use
exactly your example: 


    irb(main):005:0> User.lab
       (0.4ms)  BEGIN
      SQL (0.2ms)  INSERT INTO "users" ("created_at", "data", "updated_at") VALUES ($1, $2, $3) RETURNING "id"  [["created_at", Tue, 18 Jun 2013 15:04:36 UTC +00:00], ["data", ["v1", {"k2"=>"v2"}, "v3"]], ["updated_at", Tue, 18 Jun 2013 15:04:36 UTC +00:00]]
    TypeError: can't cast Array to json: INSERT INTO "users" ("created_at", "data", "updated_at") VALUES ($1, $2, $3) RETURNING "id"   (0.3ms)  ROLLBACK
    TypeError: can't cast Array to json


If I add  `serialize :data, JsonSerializer` to the model, it will not throw an
error but the data hash will just be empty as stated before: 


    irb(main):008:0> User.lab
       (0.3ms)  BEGIN
      SQL (0.8ms)  INSERT INTO "users" ("created_at", "data", "updated_at") VALUES ($1, $2, $3) RETURNING "id"  [["created_at", Tue, 18 Jun 2013 13:46:14 UTC +00:00], ["data", "[\"v1\",{\"k2\":\"v2\"},\"v3\"]"], ["updated_at", Tue, 18 Jun 2013 13:46:14 UTC +00:00]]
       (1.8ms)  COMMIT
      User Load (0.8ms)  SELECT "users".* FROM "users" ORDER BY "users"."id" DESC LIMIT 1
    #<User id: 2, data: {}, created_at: "2013-06-18 13:46:14", updated_at: "2013-06-18 13:46:14">
    {}



Again: on rc1 with explicit `serialize` everything works as fine: 
  
    Loading development environment (Rails 4.0.0.rc1)
    irb(main):001:0> User
    => User(id: integer, data: json, created_at: datetime, updated_at: datetime)
    irb(main):002:0> User.lab
       (0.4ms)  BEGIN
      SQL (4.8ms)  INSERT INTO "users" ("created_at", "data", "updated_at") VALUES ($1, $2, $3) RETURNING "id"  [["created_at", Tue, 18 Jun 2013 13:47:58 UTC +00:00], ["data", "[\"v1\",{\"k2\":\"v2\"},\"v3\"]"], ["updated_at", Tue, 18 Jun 2013 13:47:58 UTC +00:00]]
       (0.5ms)  COMMIT
      User Load (0.7ms)  SELECT "users".* FROM "users" ORDER BY "users"."id" DESC LIMIT 1
    #<User id: 3, data: ["v1", {"k2"=>"v2"}, "v3"], created_at: "2013-06-18 13:47:58", updated_at: "2013-06-18 13:47:58">
    v1
    {"k2"=>"v2"}
    v3
    => nil


On rc1 without `serialize` I will get the same error as with rc2. 

    Loading development environment (Rails 4.0.0.rc1)irb(main):001:0> User.lab
       (0.3ms)  BEGIN
      SQL (2.9ms)  INSERT INTO "users" ("created_at", "data", "updated_at") VALUES ($1, $2, $3) RETURNING "id"  [["created_at", Tue, 18 Jun 2013 13
    :49:08 UTC +00:00], ["data", ["v1", {"k2"=>"v2"}, "v3"]], ["updated_at", Tue, 18 Jun 2013 13:49:08 UTC +00:00]]
    TypeError: can't cast Array to json: INSERT INTO "users" ("created_at", "data", "updated_at") VALUES ($1, $2, $3) RETURNING "id"
       (0.3ms)  ROLLBACKTypeError: can't cast Array to json


About the environment: ruby 2.0.0p195 with some database related gems, notably foreigner,
and composite_primary_keys. I also run the project under torquebox/jruby but
haven't looked at the issue with jruby.
